# Generated from lens.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,284,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
        15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
        21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
        28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,
        33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,3,36,225,8,36,1,37,1,37,1,37,1,37,5,37,231,
        8,37,10,37,12,37,234,9,37,1,37,1,37,1,38,3,38,239,8,38,1,38,4,38,
        242,8,38,11,38,12,38,243,1,38,1,38,4,38,248,8,38,11,38,12,38,249,
        1,39,3,39,253,8,39,1,39,4,39,256,8,39,11,39,12,39,257,1,40,1,40,
        5,40,262,8,40,10,40,12,40,265,9,40,1,41,1,41,1,41,1,41,5,41,271,
        8,41,10,41,12,41,274,9,41,1,41,1,41,1,42,4,42,279,8,42,11,42,12,
        42,280,1,42,1,42,0,0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,1,0,6,2,0,34,34,92,92,1,0,48,57,3,0,65,90,95,95,97,122,4,0,
        48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,294,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,3,94,1,0,0,0,5,99,
        1,0,0,0,7,103,1,0,0,0,9,109,1,0,0,0,11,115,1,0,0,0,13,118,1,0,0,
        0,15,125,1,0,0,0,17,130,1,0,0,0,19,134,1,0,0,0,21,140,1,0,0,0,23,
        143,1,0,0,0,25,147,1,0,0,0,27,153,1,0,0,0,29,160,1,0,0,0,31,165,
        1,0,0,0,33,168,1,0,0,0,35,170,1,0,0,0,37,173,1,0,0,0,39,175,1,0,
        0,0,41,177,1,0,0,0,43,179,1,0,0,0,45,181,1,0,0,0,47,183,1,0,0,0,
        49,185,1,0,0,0,51,187,1,0,0,0,53,189,1,0,0,0,55,191,1,0,0,0,57,193,
        1,0,0,0,59,196,1,0,0,0,61,199,1,0,0,0,63,201,1,0,0,0,65,203,1,0,
        0,0,67,206,1,0,0,0,69,209,1,0,0,0,71,212,1,0,0,0,73,224,1,0,0,0,
        75,226,1,0,0,0,77,238,1,0,0,0,79,252,1,0,0,0,81,259,1,0,0,0,83,266,
        1,0,0,0,85,278,1,0,0,0,87,88,5,64,0,0,88,89,5,115,0,0,89,90,5,116,
        0,0,90,91,5,97,0,0,91,92,5,114,0,0,92,93,5,116,0,0,93,2,1,0,0,0,
        94,95,5,64,0,0,95,96,5,101,0,0,96,97,5,110,0,0,97,98,5,100,0,0,98,
        4,1,0,0,0,99,100,5,108,0,0,100,101,5,101,0,0,101,102,5,116,0,0,102,
        6,1,0,0,0,103,104,5,112,0,0,104,105,5,114,0,0,105,106,5,105,0,0,
        106,107,5,110,0,0,107,108,5,116,0,0,108,8,1,0,0,0,109,110,5,105,
        0,0,110,111,5,110,0,0,111,112,5,112,0,0,112,113,5,117,0,0,113,114,
        5,116,0,0,114,10,1,0,0,0,115,116,5,105,0,0,116,117,5,102,0,0,117,
        12,1,0,0,0,118,119,5,101,0,0,119,120,5,108,0,0,120,121,5,115,0,0,
        121,122,5,101,0,0,122,123,5,105,0,0,123,124,5,102,0,0,124,14,1,0,
        0,0,125,126,5,101,0,0,126,127,5,108,0,0,127,128,5,115,0,0,128,129,
        5,101,0,0,129,16,1,0,0,0,130,131,5,102,0,0,131,132,5,111,0,0,132,
        133,5,114,0,0,133,18,1,0,0,0,134,135,5,119,0,0,135,136,5,104,0,0,
        136,137,5,105,0,0,137,138,5,108,0,0,138,139,5,101,0,0,139,20,1,0,
        0,0,140,141,5,105,0,0,141,142,5,110,0,0,142,22,1,0,0,0,143,144,5,
        105,0,0,144,145,5,110,0,0,145,146,5,116,0,0,146,24,1,0,0,0,147,148,
        5,102,0,0,148,149,5,108,0,0,149,150,5,111,0,0,150,151,5,97,0,0,151,
        152,5,116,0,0,152,26,1,0,0,0,153,154,5,83,0,0,154,155,5,116,0,0,
        155,156,5,114,0,0,156,157,5,105,0,0,157,158,5,110,0,0,158,159,5,
        103,0,0,159,28,1,0,0,0,160,161,5,98,0,0,161,162,5,111,0,0,162,163,
        5,111,0,0,163,164,5,108,0,0,164,30,1,0,0,0,165,166,5,58,0,0,166,
        167,5,58,0,0,167,32,1,0,0,0,168,169,5,58,0,0,169,34,1,0,0,0,170,
        171,5,46,0,0,171,172,5,46,0,0,172,36,1,0,0,0,173,174,5,44,0,0,174,
        38,1,0,0,0,175,176,5,61,0,0,176,40,1,0,0,0,177,178,5,40,0,0,178,
        42,1,0,0,0,179,180,5,41,0,0,180,44,1,0,0,0,181,182,5,123,0,0,182,
        46,1,0,0,0,183,184,5,125,0,0,184,48,1,0,0,0,185,186,5,42,0,0,186,
        50,1,0,0,0,187,188,5,47,0,0,188,52,1,0,0,0,189,190,5,43,0,0,190,
        54,1,0,0,0,191,192,5,45,0,0,192,56,1,0,0,0,193,194,5,61,0,0,194,
        195,5,61,0,0,195,58,1,0,0,0,196,197,5,33,0,0,197,198,5,61,0,0,198,
        60,1,0,0,0,199,200,5,60,0,0,200,62,1,0,0,0,201,202,5,62,0,0,202,
        64,1,0,0,0,203,204,5,60,0,0,204,205,5,61,0,0,205,66,1,0,0,0,206,
        207,5,62,0,0,207,208,5,61,0,0,208,68,1,0,0,0,209,210,5,38,0,0,210,
        211,5,38,0,0,211,70,1,0,0,0,212,213,5,124,0,0,213,214,5,124,0,0,
        214,72,1,0,0,0,215,216,5,84,0,0,216,217,5,114,0,0,217,218,5,117,
        0,0,218,225,5,101,0,0,219,220,5,70,0,0,220,221,5,97,0,0,221,222,
        5,108,0,0,222,223,5,115,0,0,223,225,5,101,0,0,224,215,1,0,0,0,224,
        219,1,0,0,0,225,74,1,0,0,0,226,232,5,34,0,0,227,231,8,0,0,0,228,
        229,5,92,0,0,229,231,9,0,0,0,230,227,1,0,0,0,230,228,1,0,0,0,231,
        234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,
        232,1,0,0,0,235,236,5,34,0,0,236,76,1,0,0,0,237,239,5,45,0,0,238,
        237,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,242,7,1,0,0,241,
        240,1,0,0,0,242,243,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,
        245,1,0,0,0,245,247,5,46,0,0,246,248,7,1,0,0,247,246,1,0,0,0,248,
        249,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,78,1,0,0,0,251,253,
        5,45,0,0,252,251,1,0,0,0,252,253,1,0,0,0,253,255,1,0,0,0,254,256,
        7,1,0,0,255,254,1,0,0,0,256,257,1,0,0,0,257,255,1,0,0,0,257,258,
        1,0,0,0,258,80,1,0,0,0,259,263,7,2,0,0,260,262,7,3,0,0,261,260,1,
        0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,82,1,0,
        0,0,265,263,1,0,0,0,266,267,5,47,0,0,267,268,5,47,0,0,268,272,1,
        0,0,0,269,271,8,4,0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,
        0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,272,1,0,0,0,275,276,6,
        41,0,0,276,84,1,0,0,0,277,279,7,5,0,0,278,277,1,0,0,0,279,280,1,
        0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,283,6,
        42,0,0,283,86,1,0,0,0,12,0,224,230,232,238,243,249,252,257,263,272,
        280,1,6,0,0
    ]

class lensLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    START = 1
    END = 2
    LET = 3
    PRINT = 4
    INPUT = 5
    IF = 6
    ELSEIF = 7
    ELSE = 8
    FOR = 9
    WHILE = 10
    IN = 11
    INT_TYPE = 12
    FLOAT_TYPE = 13
    STRING_TYPE = 14
    BOOL_TYPE = 15
    DUPONT = 16
    POINT2 = 17
    DOT2 = 18
    VIRG = 19
    EQUALS = 20
    P_N = 21
    P_I = 22
    C_N = 23
    C_I = 24
    MUL = 25
    DIV = 26
    ADD = 27
    SUB = 28
    EQ = 29
    NEQ = 30
    LT = 31
    GT = 32
    LTE = 33
    GTE = 34
    AND = 35
    OR = 36
    BOOL = 37
    STRING = 38
    FLOAT = 39
    INT = 40
    VAR = 41
    COMENTARIO = 42
    WS = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'@start'", "'@end'", "'let'", "'print'", "'input'", "'if'", 
            "'elseif'", "'else'", "'for'", "'while'", "'in'", "'int'", "'float'", 
            "'String'", "'bool'", "'::'", "':'", "'..'", "','", "'='", "'('", 
            "')'", "'{'", "'}'", "'*'", "'/'", "'+'", "'-'", "'=='", "'!='", 
            "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'" ]

    symbolicNames = [ "<INVALID>",
            "START", "END", "LET", "PRINT", "INPUT", "IF", "ELSEIF", "ELSE", 
            "FOR", "WHILE", "IN", "INT_TYPE", "FLOAT_TYPE", "STRING_TYPE", 
            "BOOL_TYPE", "DUPONT", "POINT2", "DOT2", "VIRG", "EQUALS", "P_N", 
            "P_I", "C_N", "C_I", "MUL", "DIV", "ADD", "SUB", "EQ", "NEQ", 
            "LT", "GT", "LTE", "GTE", "AND", "OR", "BOOL", "STRING", "FLOAT", 
            "INT", "VAR", "COMENTARIO", "WS" ]

    ruleNames = [ "START", "END", "LET", "PRINT", "INPUT", "IF", "ELSEIF", 
                  "ELSE", "FOR", "WHILE", "IN", "INT_TYPE", "FLOAT_TYPE", 
                  "STRING_TYPE", "BOOL_TYPE", "DUPONT", "POINT2", "DOT2", 
                  "VIRG", "EQUALS", "P_N", "P_I", "C_N", "C_I", "MUL", "DIV", 
                  "ADD", "SUB", "EQ", "NEQ", "LT", "GT", "LTE", "GTE", "AND", 
                  "OR", "BOOL", "STRING", "FLOAT", "INT", "VAR", "COMENTARIO", 
                  "WS" ]

    grammarFileName = "lens.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


