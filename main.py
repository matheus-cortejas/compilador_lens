import logging
from antlr4 import *
from generated.lensLexer import lensLexer
from generated.lensParser import lensParser
from ErrorHandler import CustomErrorListener
from SemanticAnalyzer import SemanticAnalyzer
from ASTDotVisitor import ASTDotVisitor
from TACGenerator import TACGenerator
from LLVMIRGenerator import LLVMIRGenerator
from X86AssemblyGenerator import X86AssemblyGenerator
import subprocess

# Configura√ß√£o do logging - APENAS para arquivo
logging.basicConfig(
    filename='analisador.log',
    filemode='w',
    encoding='utf-8',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def analisar_arquivo(caminho_arquivo):
    try:
        logging.info(f"Iniciando an√°lise do arquivo: {caminho_arquivo}")

        with open(caminho_arquivo, "r", encoding="utf-8") as f:
            codigo = f.read()

        logging.info("C√≥digo carregado com sucesso.")
        print("üì• C√≥digo carregado:\n" + "-"*40)
        print(codigo)
        print("-"*40)

        # ========================================
        # üîç FASE 1: AN√ÅLISE L√âXICA
        # ========================================
        print("\nüîç FASE 1: An√°lise L√©xica")
        
        input_stream = InputStream(codigo)
        lexer = lensLexer(input_stream)

        error_listener_lexer = CustomErrorListener()
        lexer.removeErrorListeners()
        lexer.addErrorListener(error_listener_lexer)

        token_stream = CommonTokenStream(lexer)
        token_stream.fill()

        if error_listener_lexer.tem_erro:
            logging.warning("Erro l√©xico detectado. Encerrando an√°lise.")
            print("‚ùå Erros l√©xicos encontrados. Encerrando an√°lise.")
            return
        
        print("‚úÖ An√°lise l√©xica conclu√≠da sem erros.")

        # üìä RESULTADO DA AN√ÅLISE L√âXICA - TOKENS
        logging.info("Tokens analisados com sucesso. Imprimindo tokens:")
        print("\nüîé Tokens identificados:")
        for i, token in enumerate(token_stream.tokens):
            if token.type != Token.EOF:
                nome = (lexer.symbolicNames[token.type] 
                       if token.type < len(lexer.symbolicNames) and lexer.symbolicNames[token.type] 
                       else f"TOKEN_{token.type}")
                print(f"{i+1:3d}. <{nome}, '{token.text}', L{token.line}, C{token.column}>")
                logging.info(f"Token: <{nome}, {token.text}, Linha {token.line}, Coluna {token.column}>")

        # ========================================
        # üîç FASE 2: AN√ÅLISE SINT√ÅTICA
        # ========================================
        print("\nüîç FASE 2: An√°lise Sint√°tica")
        
        parser = lensParser(token_stream)

        error_listener_parser = CustomErrorListener()
        parser.removeErrorListeners()
        parser.addErrorListener(error_listener_parser)

        arvore = parser.lens()

        if error_listener_parser.tem_erro:
            logging.warning("Erro sint√°tico detectado. Encerrando an√°lise.")
            print("‚ùå Erros sint√°ticos encontrados. Encerrando an√°lise.")
            return
        
        print("‚úÖ An√°lise sint√°tica conclu√≠da sem erros.")

        # üå≥ RESULTADO DA AN√ÅLISE SINT√ÅTICA - AST
        print("\nüå≥ Gerando AST...")
        
        visitor = ASTDotVisitor()
        visitor.visit(arvore)
        logging.info("AST gerada com sucesso.")

        with open("ast.dot", "w", encoding="utf-8") as f:
            f.write(visitor.get_dot())
        logging.info("Arquivo 'ast.dot' salvo com sucesso.")
        print("‚úÖ Arquivo 'ast.dot' salvo com sucesso.")

        # Tentar gerar imagem PNG da AST
        dot_paths = [
            r"C:\Program Files\Graphviz\bin\dot.exe",
            r"C:\Program Files (x86)\Graphviz\bin\dot.exe",
            "dot"  # Caso esteja no PATH
        ]

        imagem_gerada = False
        for dot_path in dot_paths:
            try:
                subprocess.run([dot_path, "-Tpng", "ast.dot", "-o", "ast.png"], 
                             check=True, capture_output=True, text=True)
                logging.info("Imagem 'ast.png' gerada com sucesso.")
                print("üñºÔ∏è AST gerada com sucesso em 'ast.png'.")
                imagem_gerada = True
                break
            except FileNotFoundError:
                continue
            except subprocess.CalledProcessError as e:
                logging.error(f"Erro ao executar dot: {e.stderr}")
                print("‚ùå Erro ao executar o comando 'dot'. Verifique a sintaxe do arquivo 'ast.dot'.")
                break

        if not imagem_gerada:
            print("‚ö†Ô∏è Graphviz n√£o encontrado. AST salva apenas como .dot")
            print("üí° Instale o Graphviz para gerar imagens: https://graphviz.org/download/")

        # ========================================
        # üîç FASE 3: AN√ÅLISE SEM√ÇNTICA
        # ========================================
        print("\nüîç FASE 3: An√°lise Sem√¢ntica")
        
        logging.info("Iniciando an√°lise sem√¢ntica.")
        semantic = SemanticAnalyzer()
        semantic.visit(arvore)
        semantic.report()

        if semantic.errors_found:
            print("‚ùå Erros sem√¢nticos encontrados:")
            print(f"   ‚Ä¢ Consulte 'analisador.log' para detalhes completos")
            print("üìä Tokens e AST foram gerados com sucesso (veja acima).")
            print("\nüõë COMPILA√á√ÉO INTERROMPIDA - C√≥digo n√£o ser√° gerado devido a erros sem√¢nticos.")
            print("üí° Corrija os erros sem√¢nticos e execute novamente.")
            return

        print("‚úÖ An√°lise sem√¢ntica conclu√≠da sem erros.")

        # ========================================
        # üîß FASE 4: GERA√á√ÉO DE C√ìDIGO (S√≥ se sem erros)
        # ========================================
        print("\nüîß FASE 4: Gera√ß√£o de C√≥digo Intermedi√°rio (TAC)")
        
        # S√≥ chega aqui se N√ÉO houver erros sem√¢nticos
        logging.info("Iniciando gera√ß√£o de c√≥digo TAC.")
        tac_generator = TACGenerator()
        tac_generator.visit(arvore)
        
        print("‚úÖ C√≥digo TAC gerado com sucesso.")
        print("\nüìù C√≥digo TAC:")
        print("-" * 50)
        print(tac_generator.get_tac_code())
        print("-" * 50)
        
        if tac_generator.save_to_file("output.tac"):
            print("‚úÖ C√≥digo TAC salvo em 'output.tac'.")

        # ========================================
        # üîß FASE 5: ESCOLHA DO BACKEND
        # ========================================
        print("\nüîß FASE 5: Escolha do Backend de Gera√ß√£o")
        print("1. Assembly x86-64 (.s)")
        print("2. LLVM IR (.ll)")
        print("3. Ambos")
        
        while True:
            try:
                escolha = input("\nEscolha uma op√ß√£o (1, 2 ou 3): ").strip()
                if escolha in ['1', '2', '3']:
                    break
                print("‚ö†Ô∏è Op√ß√£o inv√°lida. Digite 1, 2 ou 3.")
            except KeyboardInterrupt:
                print("\n\nüëã Compila√ß√£o cancelada pelo usu√°rio.")
                return

        arquivos_gerados = []

        # ========================================
        # üîß GERA√á√ÉO DE ASSEMBLY x86-64
        # ========================================
        if escolha in ['1', '3']:
            print("\nüíª Gerando Assembly x86-64...")
            
            logging.info("Iniciando gera√ß√£o de c√≥digo Assembly x86-64.")
            asm_generator = X86AssemblyGenerator(tac_generator.instructions)
            
            print("‚úÖ C√≥digo Assembly x86-64 gerado com sucesso.")
            print("\nüíª C√≥digo Assembly x86-64:")
            print("-" * 60)
            print(asm_generator.generate())
            print("-" * 60)
            
            if asm_generator.save_to_file("output.s"):
                print("‚úÖ C√≥digo Assembly salvo em 'output.s'.")
                arquivos_gerados.append("output.s")

        # ========================================
        # üîß GERA√á√ÉO DE LLVM IR
        # ========================================
        if escolha in ['2', '3']:
            print("\nü¶ô Gerando LLVM IR...")
            
            logging.info("Iniciando gera√ß√£o de c√≥digo LLVM IR.")
            llvm_generator = LLVMIRGenerator(tac_generator.instructions)
            
            print("‚úÖ C√≥digo LLVM IR gerado com sucesso.")
            print("\nü¶ô C√≥digo LLVM IR:")
            print("-" * 60)
            print(llvm_generator.generate())
            print("-" * 60)
            
            if llvm_generator.save_to_file("output.ll"):
                print("‚úÖ C√≥digo LLVM IR salvo em 'output.ll'.")
                arquivos_gerados.append("output.ll")

        # ========================================
        # üéâ FINALIZA√á√ÉO
        # ========================================
        print("\nüéâ COMPILA√á√ÉO COMPLETA! Pipeline finalizado com sucesso!")
        print("üöÄ Arquivos gerados:")
        print("   ‚Ä¢ analisador.log  - Log detalhado")
        print("   ‚Ä¢ ast.dot/.png    - √Årvore Sint√°tica")
        print("   ‚Ä¢ output.tac      - C√≥digo Intermedi√°rio")
        
        for arquivo in arquivos_gerados:
            if arquivo == "output.s":
                print("   ‚Ä¢ output.s        - Assembly x86-64")
            elif arquivo == "output.ll":
                print("   ‚Ä¢ output.ll       - LLVM IR")

        # ========================================
        # üí° INSTRU√á√ïES DE EXECU√á√ÉO
        # ========================================
        print("\nüí° Instru√ß√µes de execu√ß√£o:")
        
        if "output.s" in arquivos_gerados:
            print("\nüìã Assembly x86-64 (output.s):")
            print("   as output.s -o output.o")
            print("   ld output.o -o programa")
            print("   ./programa")
        
        if "output.ll" in arquivos_gerados:
            print("\nüìã LLVM IR (output.ll):")
            print("   # Execu√ß√£o direta:")
            print("   lli output.ll")
            print("   ")
            print("   # OU compilar para execut√°vel:")
            print("   llc output.ll -o output.s")
            print("   cl output.s /Fe:programa.exe    # Windows")
            print("   gcc output.s -o programa        # Linux/Mac")
            print("   programa.exe                    # Windows")
            print("   ./programa                      # Linux/Mac")

        print("\nüîß Depend√™ncias necess√°rias:")
        if "output.s" in arquivos_gerados:
            print("   ‚Ä¢ GNU Assembler (as) e Linker (ld)")
        if "output.ll" in arquivos_gerados:
            print("   ‚Ä¢ LLVM (lli, llc)")
            print("   ‚Ä¢ Visual Studio Build Tools (cl) ou GCC")

    except Exception as e:
        logging.exception(f"Erro durante a an√°lise: {e}")
        print(f"‚ùå Erro durante a an√°lise: {e}")

if __name__ == "__main__":
    print("üöÄ COMPILADOR LENS - Pipeline Completo")
    print("üìã Fases: L√©xica ‚Üí Sint√°tica ‚Üí Sem√¢ntica ‚Üí TAC ‚Üí [Assembly/LLVM]")
    print("=" * 80)
    
    # caminho = str(input("Digite o nome do arquivo Lens: "))
    caminho = "script"
    analisar_arquivo(f'{caminho}.lens')